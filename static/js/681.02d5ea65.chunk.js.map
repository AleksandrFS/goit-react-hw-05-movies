{"version":3,"file":"static/js/681.02d5ea65.chunk.js","mappings":"0OA2DA,UApDgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAkCN,EAAAA,EAAAA,WAAS,GAA3C,eAAOO,EAAP,KAAkBC,EAAlB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAuBR,OArBAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAGA,IAAMG,EAAU,mCAAG,2FACjBJ,GAAa,GADI,mBAGWK,EAAAA,EAAAA,IAAgBJ,GAH3B,OAGTK,EAHS,OAIfZ,EAAWY,GACgB,IAAvBA,EAAYC,QACdX,GAAW,GANE,gDASfE,EAAS,EAAD,IATO,yBAWfE,GAAa,GAXE,4EAAH,qDAchBI,GAfC,CAgBF,GAAE,CAACH,KAGF,gCACGF,IAAa,SAAC,IAAD,IACbJ,IAAW,uBAAG,2CACdE,IAAS,uBAAG,uBACZJ,IACC,0BACE,wBACGA,EAAQe,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,GAC/B,OACE,2BACE,yBAAG,WAAH,OAAYF,QAAZ,IAAYA,EAAAA,EAAU,GAAG,QACzB,gCAAIC,QAAJ,IAAIA,EAAAA,EAAW,GAAG,SAFpB,OAASC,QAAT,IAASA,EAAAA,GAAMC,EAAAA,EAAAA,MAKlB,UAMZ,C,+LCvDKC,EAAU,mCAEVC,EAAS,sCAEFC,EAAqB,mCAAG,oGACVC,EAAAA,EAAAA,IAAA,UAJN,4DAIM,OAA4BH,IADlB,cAC7BI,EAD6B,yBAG5BA,EAAWC,KAAKC,SAHY,2CAAH,qDAMrBC,EAAQ,mCAAG,WAAMnB,GAAN,uFACGe,EAAAA,EAAAA,IAAA,UACpBF,GADoB,OACRb,EADQ,oBACWY,IAFd,cAChBI,EADgB,yBAIfA,EAAWC,MAJI,2CAAH,sDAORG,EAAe,mCAAG,WAAMpB,GAAN,uFACJe,EAAAA,EAAAA,IAAA,UACpBF,GADoB,OACRb,EADQ,4BACmBY,IAFf,cACvBI,EADuB,yBAItBA,EAAWC,MAJW,2CAAH,sDAOfb,EAAe,mCAAG,WAAMJ,GAAN,uFACJe,EAAAA,EAAAA,IAAA,UACpBF,GADoB,OACRb,EADQ,4BACmBY,IAFf,cACvBI,EADuB,yBAItBA,EAAWC,KAAKC,SAJM,2CAAH,sDAOfG,EAAa,mCAAG,WAAMC,GAAN,uFACFP,EAAAA,EAAAA,IAAA,0DAC4BO,EAD5B,oBAC6CV,IAF3C,cACrBI,EADqB,yBAIpBA,EAAWC,KAAKC,SAJI,2CAAH,qD,uDChCnB,IAkBIP,EAAS,eAACY,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACjB,EAAIkB,GAWvD,OARElB,IAFFkB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Reviews.jsx","fetchFilmsUtils/fetchFilmData.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { nanoid } from 'nanoid';\n\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'fetchFilmsUtils/fetchFilmData';\nimport { Spinner } from './Loader';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n    const getReviews = async () => {\n      setIsLoading(true);\n      try {\n        const reviewsData = await getMovieReviews(movieId);\n        setReviews(reviewsData);\n        if (reviewsData.length === 0) {\n          setIsEmpty(true);\n        }\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Spinner />}\n      {isEmpty && <p>There is no any reviews for this movie</p>}\n      {error && <p>Some error occured</p>}\n      {reviews && (\n        <div>\n          <ul>\n            {reviews.map(({ author, content, id }) => {\n              return (\n                <li key={id ?? nanoid()}>\n                  <p>Author: {author ?? ''} </p>\n                  <p>{content ?? ''} </p>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = '7b4562665a42dd00b8be25ed9e213510';\nconst URL_TRENDING = 'https://api.themoviedb.org/3/trending/movie/day?api_key=';\nconst URL_MOVIE = `https://api.themoviedb.org/3/movie/`;\n\nexport const getMoviesListTrending = async () => {\n  const resultData = await axios.get(`${URL_TRENDING}${API_KEY}`);\n\n  return resultData.data.results;\n};\n\nexport const getMovie = async movieId => {\n  const resultData = await axios.get(\n    `${URL_MOVIE}${movieId}?api_key=${API_KEY}`\n  );\n  return resultData.data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const resultData = await axios.get(\n    `${URL_MOVIE}${movieId}/credits?api_key=${API_KEY}`\n  );\n  return resultData.data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const resultData = await axios.get(\n    `${URL_MOVIE}${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return resultData.data.results;\n};\n\nexport const getMoviesList = async query => {\n  const resultData = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${query}&api_key=${API_KEY}`\n  );\n  return resultData.data.results;\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","reviews","setReviews","isEmpty","setIsEmpty","error","setError","isLoading","setIsLoading","movieId","useParams","useEffect","getReviews","getMovieReviews","reviewsData","length","map","author","content","id","nanoid","API_KEY","URL_MOVIE","getMoviesListTrending","axios","resultData","data","results","getMovie","getMovieCredits","getMoviesList","query","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}